{"version":3,"sources":["lib/config.ts","lib/helpers.ts","components/Service.tsx","components/Visualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["customTagsMap","localStorage","getItem","customCategoryMap","tagsMap","magento","drupal","backend","JSON","parse","categoryMap","factory","provider","builder","transformer","datasource","service","resolver","logger","extractTags","name","tags","pattern","match","RegExp","push","extractCategories","categories","Service","class_","arguments_","serviceConfigs","open","className","map","tag","color","style","backgroundColor","arg","argKey","replace","hasOwnProperty","args_","arguments","cls_","class","fct_","factoryFrag","ROOT_SERVICE","Visualizer","endpoint","useState","openAll","setOpenAll","useQuery","fetch","then","res","json","isLoading","error","data","message","config","services","parameterConfigs","parameters","gatewayApp","nodes","Object","keys","sort","id","label","join","labelType","height","links","forEach","node","source","target","curve","curveBasis","width","animate","shape","zoomable","rankdir","align","ranker","onClick","src","theme","collapsed","displayDataTypes","queryClient","QueryClient","App","setEndpoint","fieldValue","setFieldValue","QueryClientProvider","client","onSubmit","e","preventDefault","setItem","type","placeholder","onChange","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69ef51a7.chunk.js","sourcesContent":["const customTagsMap = localStorage.getItem('depGraphViz.tagsMap') || '{}';\nconst customCategoryMap =\n  localStorage.getItem('depGraphViz.categoryMap') || '{}';\n\nexport const tagsMap: { [key: string]: [string, string?] } = {\n  magento: ['Magento', 'orangered'],\n  drupal: ['Drupal', '#139ddd'],\n  backend: ['Backend', '#444'],\n  ...JSON.parse(customTagsMap),\n};\n\nexport const categoryMap: { [key: string]: [string, string?] } = {\n  factory: ['factory', '#980034'],\n  provider: ['provider', '#003775'],\n  builder: ['builder', '#653211'],\n  transformer: ['transformer', '#13655d'],\n  datasource: ['datasource', '#464'],\n  service: ['service', '#4a4'],\n  resolver: ['resolver', '#838'],\n  logger: ['logger', '#000'],\n  ...JSON.parse(customCategoryMap),\n};\n","import { categoryMap, tagsMap } from './config';\n\nexport const extractTags = (name: string): [string, string?][] => {\n  let tags = [];\n  for (let pattern in tagsMap) {\n    if (name.match(new RegExp(pattern, 'i'))) {\n      tags.push(tagsMap[pattern]);\n    }\n  }\n\n  return tags;\n};\n\nexport const extractCategories = (name: string): [string, string?][] => {\n  let categories = [];\n  for (let pattern in categoryMap) {\n    if (name.match(new RegExp(pattern, 'i'))) {\n      categories.push(categoryMap[pattern]);\n    }\n  }\n\n  return categories;\n};\n","import { FunctionComponent } from 'react';\nimport { extractTags } from '../lib/helpers';\n\nexport type ServiceProps = {\n  name: string;\n  class_: string;\n  arguments_?: string[];\n  factory?: string[];\n  serviceConfigs: any;\n  open?: boolean;\n};\n\nconst Service: FunctionComponent<ServiceProps> = ({\n  name,\n  class_,\n  arguments_,\n  factory,\n  serviceConfigs,\n  open,\n}) => {\n  return (\n    <div className=\"service\">\n      <details open={open}>\n        <summary>\n          <h3>\n            {name}{' '}\n            {class_ &&\n              extractTags(class_).map(([tag, color]) => (\n                <span className=\"tag\" style={{ backgroundColor: color }}>\n                  {tag}\n                </span>\n              ))}\n          </h3>\n        </summary>\n        <div className=\"service-content\">\n          <p className=\"class-path\">{class_}</p>\n\n          {arguments_ && (\n            <ul className=\"arguments-list\">\n              {arguments_.map((arg) => {\n                const argKey = arg.replace('@', '');\n\n                if (serviceConfigs.hasOwnProperty(argKey)) {\n                  const {\n                    arguments: args_,\n                    class: cls_,\n                    factory: fct_,\n                  } = serviceConfigs[argKey];\n                  return (\n                    <li>\n                      <Service\n                        name={arg}\n                        class_={cls_}\n                        arguments_={args_}\n                        factory={fct_}\n                        serviceConfigs={serviceConfigs}\n                        open={open}\n                      />\n                    </li>\n                  );\n                } else return <li>{arg}</li>;\n              })}\n            </ul>\n          )}\n          {factory && (\n            <>\n              <h4>Factory:</h4>\n              <ul>\n                {factory?.map((factoryFrag) => (\n                  <li>{factoryFrag}</li>\n                ))}\n              </ul>\n            </>\n          )}\n        </div>\n      </details>\n    </div>\n  );\n};\n\nexport { Service };\n","import { FunctionComponent, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { Service } from './Service';\nimport ReactJson from 'react-json-view';\nimport DagreGraph from 'dagre-d3-react';\nimport { extractCategories, extractTags } from '../lib/helpers';\nimport { curveBasis } from 'd3';\n\ntype d3Node = {\n  id: any;\n  label: string;\n  class?: string;\n  labelType?: 'html' | 'svg' | 'string';\n  config?: object;\n};\nconst ROOT_SERVICE =\n  localStorage.getItem('depGraphViz.rootService') || '/Gateway[Gateway]';\n\nconst Visualizer: FunctionComponent<{ endpoint: string }> = ({\n  endpoint = localStorage.getItem('depGraphViz.endpoint') ||\n    'http://localhost:4009',\n}) => {\n  const [openAll, setOpenAll] = useState(false);\n\n  const { isLoading, error, data } = useQuery<any, Error>('depData', () =>\n    fetch(endpoint).then((res) => res.json())\n  );\n\n  if (isLoading) return <>Loading...</>;\n\n  if (error) return <>An error has occurred: {error.message}</>;\n\n  const { services: serviceConfigs, parameters: parameterConfigs } =\n    data.config.data;\n\n  const gatewayApp = serviceConfigs[ROOT_SERVICE];\n\n  const nodes: d3Node[] = Object.keys(serviceConfigs)\n    .sort()\n    .map((service) => {\n      const class_ = serviceConfigs[service].class;\n      return {\n        id: service,\n        label: `<strong>${service}</strong><br/>\n    ${\n      class_ &&\n      `<span class=\"class-path\">${class_}</span>\n        <br/>` +\n        extractTags(class_)\n          .map(\n            ([tag, color]) =>\n              `<span class=\"tag\" style=\"background-color: ${color}\">\n          ${tag}\n        </span>`\n          )\n          .join('')\n    }`,\n        labelType: 'html',\n        class: extractCategories(service)\n          .map(([x]) => x)\n          .join(' '),\n        config: { height: 55 },\n      };\n    });\n\n  let links: any[] = [];\n\n  nodes.forEach((node) => {\n    const service = serviceConfigs[node.id];\n\n    service.arguments?.forEach((arg: string) => {\n      const argKey = arg.replace('@', '');\n      if (serviceConfigs.hasOwnProperty(argKey)) {\n        links.push({\n          source: node.id,\n          target: argKey,\n          config: {\n            curve: curveBasis,\n          },\n        });\n      }\n    });\n  });\n\n  return (\n    <div>\n      <header>\n        <h1>Dependency Graph Visualizer</h1>\n      </header>\n      <div className=\"row\">\n        <div className=\"col\">\n          <DagreGraph\n            nodes={nodes}\n            links={links}\n            width=\"100%\"\n            height=\"600\"\n            animate={1000}\n            shape=\"rect\"\n            zoomable\n            config={{\n              rankdir: 'LR',\n              align: 'UL',\n              ranker: 'longest-link',\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>\n            Dependency Explorer{' '}\n            <button\n              onClick={() => {\n                setOpenAll(!openAll);\n              }}\n            >\n              Expand/Collapse All\n            </button>\n          </h2>\n\n          <Service\n            serviceConfigs={serviceConfigs}\n            name={ROOT_SERVICE}\n            class_={gatewayApp.class}\n            arguments_={gatewayApp.arguments}\n            factory={gatewayApp.factory}\n            open={openAll}\n          />\n        </div>\n        <div className=\"col\">\n          <h2>Parameters</h2>\n          <ReactJson\n            src={parameterConfigs}\n            theme=\"summerfruit:inverted\"\n            collapsed={2}\n            displayDataTypes={false}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Visualizer };\n","import { useState } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport './App.css';\nimport { Visualizer } from './components/Visualizer';\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  const [endpoint, setEndpoint] = useState(\n    localStorage.getItem('depGraphViz.endpoint') || 'http://localhost:4009'\n  );\n  const [fieldValue, setFieldValue] = useState(\n    localStorage.getItem('depGraphViz.endpoint') || 'http://localhost:4009'\n  );\n  return (\n    <QueryClientProvider client={queryClient}>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          setEndpoint(fieldValue);\n          localStorage.setItem('depGraphViz.endpoint', endpoint);\n        }}\n      >\n        <input\n          type=\"text\"\n          name=\"endpoint\"\n          placeholder=\"Endpoint\"\n          onChange={(e) => setFieldValue(e.target.value)}\n          value={fieldValue}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n      <Visualizer endpoint={endpoint} />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}